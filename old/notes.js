//lookuptables in 1 var (each line "xy z" means that z is a minimal equivalent expression of a?y:x):
// a position
// ==========
// 0 y
// 1 x
//
// xy z
// ====
// 00 0
// 01 a
// 10 a'
// 11 1

//lookuptables in 2 vars (each line "vwxy z" means that z is a minimal equivalent expression of a?(b?y:x):(b?w:v)):
// ab position
// 00 v
// 01 w
// 10 x
// 11 y
//
// vwxy z
// 0000 0
// 0001 a?b:0
// 0010 a?b':0
// 0011 a
// 0100 a?0:b
// 0101 b
// 0110 a?b':b
// 0111 a?1:b
// 1000 a?0:b'
// 1001 a?b:b'
// 1010 b'
// 1011 a?1:b'
// 1100 a'
// 1101 a?b:1
// 1110 a?b':1
// 1111 1


// expressions in 0 clauses, 0 vars:
// x (x in 0, 1)

// expressions in 0 clauses, 1 var:
// x (x in 0, 1, a, a')

// expressions in 0/1 clauses, 2 vars:
// x (x in 0, 1, a, a', b, b')
// (x?y:z) (x,y,z in 0, 1, a, a', b, b')

// 0 clause trees:
// x

// 1 clause trees:
// (x?y:z)

// 2 clause, 1 step trees:
// (v?(x?y:z):w)
// (v?w:(x?y:z))

// 2 clause, 2 step trees:
// ((x?y:z)?v:w)

// 3 clause, 1 step trees:
// (t?(u?v:w):(x?y:z))

// 3 clause, 2 step trees:
// ((t?u:v)?(w?x:y):z) step 1: (t?u:v) ; step 2: [ (w?x:y) , z ]
// ((t?u:v)?w:(x?y:z)) step 1: (t?u:v) ; step 2: [ w , (x?y:z) ]

// one-step trees are binary trees made up of (x?y:z) where x is a literal and y and z can be subtrees.
// in n-step trees, x may also be a subtree.


//             1
//         b
//             0
//     a
//             1
//         c
//             1
//

// - read an atomic instruction
// - if it's true, turn right, otherwise turn left.
// - 

//                      1
//                  d    
//                      0
//            / c        
//         1  ]         0
//     b      ]     d    
//         0  ]         1
// a          ]
//            ]         0
//     1      ]     d    
//            ]         1
//            \ c        
//                      1
//                  d    
//                      1


// abcd
// 0000 0 |
// 0001 1 |
// 0010 1 |
// 0011 1 |
// 0100 1
// 0101 0
// 0110 0
// 0111 1
// 1000 0 |
// 1001 1 |
// 1010 1 |
// 1011 1 |
// 1100 0 |
// 1101 1 |
// 1110 1 |
// 1111 1 |


// plan:
// * generate all one-step trees in n vars and identify the minimal ones for each behavior
//   * no need to consider 0, 1, or negatives on the switch
//   * no need to switch on any other var than a.
//            
// * see if any of those can be improved upon using multi-step trees

// in this case, the third tree can be put on the place of the zero, but the second tree would be reused three times
// 

// ((x?y:z):(t?u:v):w)         /\          /\  /\ ; /\ .    /\ ; . /\
// ((x?y:z):w:(t?u:v))          /\        /\
// (w?(x?y:z):(t?u:v))
// (v?(x?y:z):w)
// (v?w:(x?y:z))
// (v?w:(x?y:z))



//lookuptables in 3 vars:
// abc position
// 000 r
// 001 s
// 010 t
// 011 u
// 100 v
// 101 w
// 110 x
// 111 y
//
// rstuvwxy z
//            a?(b?(c?y:x):(c?w:v)):(b?(c?u:t):(c?s:r))
// 00000000 0
// 00000001 a?(b?c:0):0
// 00000010 a?(b'?:0
// 00000011 a
// 00000100 a?0:b
// 00000101 b
// 00000110 a?b':b
// 00000111 a?1:b
// 00001000 a?0:b'
// 00001001 a?b:b'
// 00001010 b'
// 00001011 a?1:b'
// 00001100 a'
// 00001101 a?b:1
// 00001110 a?b':1
// 00001111 1
// 00010000 0
// 00010001 a?b:0
// 00010010 a?b':0
// 00010011 a
// 00010100 a?0:b
// 00010101 b
// 00010110 a?b':b
// 00010111 a?1:b
// 00011000 a?0:b'
// 00011001 a?b:b'
// 00011010 b'
// 00011011 a?1:b'
// 00011100 a'
// 00011101 a?b:1
// 00011110 a?b':1
// 00011111 1
// 00100000 0
// 00100001 a?b:0
// 00100010 a?b':0
// 00100011 a
// 00100100 a?0:b
// 00100101 b
// 00100110 a?b':b
// 00100111 a?1:b
// 00101000 a?0:b'
// 00101001 a?b:b'
// 00101010 b'
// 00101011 a?1:b'
// 00101100 a'
// 00101101 a?b:1
// 00101110 a?b':1
// 00101111 1
// 00110000 0
// 00110001 a?b:0
// 00110010 a?b':0
// 00110011 a
// 00110100 a?0:b
// 00110101 b
// 00110110 a?b':b
// 00110111 a?1:b
// 00111000 a?0:b'
// 00111001 a?b:b'
// 00111010 b'
// 00111011 a?1:b'
// 00111100 a'
// 00111101 a?b:1
// 00111110 a?b':1
// 00111111 1
// 01000000 0
// 01000001 a?b:0
// 01000010 a?b':0
// 01000011 a
// 01000100 a?0:b
// 01000101 b
// 01000110 a?b':b
// 01000111 a?1:b
// 01001000 a?0:b'
// 01001001 a?b:b'
// 01001010 b'
// 01001011 a?1:b'
// 01001100 a'
// 01001101 a?b:1
// 01001110 a?b':1
// 01001111 1
// 01010000 0
// 01010001 a?b:0
// 01010010 a?b':0
// 01010011 a
// 01010100 a?0:b
// 01010101 b
// 01010110 a?b':b
// 01010111 a?1:b
// 01011000 a?0:b'
// 01011001 a?b:b'
// 01011010 b'
// 01011011 a?1:b'
// 01011100 a'
// 01011101 a?b:1
// 01011110 a?b':1
// 01011111 1
// 01100000 0
// 01100001 a?b:0
// 01100010 a?b':0
// 01100011 a
// 01100100 a?0:b
// 01100101 b
// 01100110 a?b':b
// 01100111 a?1:b
// 01101000 a?0:b'
// 01101001 a?b:b'
// 01101010 b'
// 01101011 a?1:b'
// 01101100 a'
// 01101101 a?b:1
// 01101110 a?b':1
// 01101111 1
// 01110000 0
// 01110001 a?b:0
// 01110010 a?b':0
// 01110011 a
// 01110100 a?0:b
// 01110101 b
// 01110110 a?b':b
// 01110111 a?1:b
// 01111000 a?0:b'
// 01111001 a?b:b'
// 01111010 b'
// 01111011 a?1:b'
// 01111100 a'
// 01111101 a?b:1
// 01111110 a?b':1
// 01111111 1
// 10000000 0
// 10000001 a?b:0
// 10000010 a?b':0
// 10000011 a
// 10000100 a?0:b
// 10000101 b
// 10000110 a?b':b
// 10000111 a?1:b
// 10001000 a?0:b'
// 10001001 a?b:b'
// 10001010 b'
// 10001011 a?1:b'
// 10001100 a'
// 10001101 a?b:1
// 10001110 a?b':1
// 10001111 1
// 10010000 0
// 10010001 a?b:0
// 10010010 a?b':0
// 10010011 a
// 10010100 a?0:b
// 10010101 b
// 10010110 a?b':b
// 10010111 a?1:b
// 10011000 a?0:b'
// 10011001 a?b:b'
// 10011010 b'
// 10011011 a?1:b'
// 10011100 a'
// 10011101 a?b:1
// 10011110 a?b':1
// 10011111 1
// 10100000 0
// 10100001 a?b:0
// 10100010 a?b':0
// 10100011 a
// 10100100 a?0:b
// 10100101 b
// 10100110 a?b':b
// 10100111 a?1:b
// 10101000 a?0:b'
// 10101001 a?b:b'
// 10101010 b'
// 10101011 a?1:b'
// 10101100 a'
// 10101101 a?b:1
// 10101110 a?b':1
// 10101111 1
// 10110000 0
// 10110001 a?b:0
// 10110010 a?b':0
// 10110011 a
// 10110100 a?0:b
// 10110101 b
// 10110110 a?b':b
// 10110111 a?1:b
// 10111000 a?0:b'
// 10111001 a?b:b'
// 10111010 b'
// 10111011 a?1:b'
// 10111100 a'
// 10111101 a?b:1
// 10111110 a?b':1
// 10111111 1
// 11000000 0
// 11000001 a?b:0
// 11000010 a?b':0
// 11000011 a
// 11000100 a?0:b
// 11000101 b
// 11000110 a?b':b
// 11000111 a?1:b
// 11001000 a?0:b'
// 11001001 a?b:b'
// 11001010 b'
// 11001011 a?1:b'
// 11001100 a'
// 11001101 a?b:1
// 11001110 a?b':1
// 11001111 1
// 11010000 0
// 11010001 a?b:0
// 11010010 a?b':0
// 11010011 a
// 11010100 a?0:b
// 11010101 b
// 11010110 a?b':b
// 11010111 a?1:b
// 11011000 a?0:b'
// 11011001 a?b:b'
// 11011010 b'
// 11011011 a?1:b'
// 11011100 a'
// 11011101 a?b:1
// 11011110 a?b':1
// 11011111 1
// 11100000 0
// 11100001 a?b:0
// 11100010 a?b':0
// 11100011 a
// 11100100 a?0:b
// 11100101 b
// 11100110 a?b':b
// 11100111 a?1:b
// 11101000 a?0:b'
// 11101001 a?b:b'
// 11101010 b'
// 11101011 a?1:b'
// 11101100 a'
// 11101101 a?b:1
// 11101110 a?b':1
// 11101111 1
// 11110000 0
// 11110001 a?b:0
// 11110010 a?b':0
// 11110011 a
// 11110100 a?0:b
// 11110101 b
// 11110110 a?b':b
// 11110111 a?1:b
// 11111000 a?0:b'
// 11111001 a?b:b'
// 11111010 b'
// 11111011 a?1:b'
// 11111100 a'
// 11111101 a?b:1
// 11111110 a?b':1
// 11111111 1

